{"ast":null,"code":"var _jsxFileName = \"/Users/hinnazeejah/Desktop/chef/frontend/src/components/AutocompleteInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst commonIngredients = ['chicken', 'beef', 'pork', 'rice', 'pasta', 'tomatoes', 'onions', 'garlic', 'potatoes', 'carrots', 'broccoli', 'spinach', 'mushrooms', 'bell peppers', 'olive oil', 'eggs', 'milk', 'cheese', 'butter', 'bread', 'flour', 'sugar'];\nconst AutocompleteInput = ({\n  value,\n  onChange,\n  placeholder\n}) => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const inputRef = useRef(null);\n  const getSuggestions = input => {\n    const inputItems = input.split(',').map(item => item.trim());\n    const currentInput = inputItems[inputItems.length - 1].toLowerCase();\n    return currentInput ? commonIngredients.filter(ingredient => ingredient.toLowerCase().startsWith(currentInput)) : [];\n  };\n  const handleInputChange = e => {\n    const newValue = e.target.value;\n    onChange(newValue);\n    setSuggestions(getSuggestions(newValue));\n    setShowSuggestions(true);\n  };\n  const handleSuggestionClick = suggestion => {\n    var _inputRef$current;\n    const inputItems = value.split(',').map(item => item.trim());\n    inputItems.pop();\n    const newValue = [...inputItems, suggestion].join(', ');\n    onChange(newValue + ', ');\n    setShowSuggestions(false);\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  };\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (inputRef.current && !inputRef.current.contains(e.target)) {\n        setShowSuggestions(false);\n      }\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: value,\n      onChange: handleInputChange,\n      onFocus: () => setShowSuggestions(true),\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\",\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), showSuggestions && suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"absolute z-10 w-full bg-white mt-1 rounded-md shadow-lg max-h-60 overflow-auto\",\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(suggestion),\n        className: \"px-4 py-2 hover:bg-gray-100 cursor-pointer\",\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AutocompleteInput, \"9j8sAJPb7uQFphySyK9MCFGsEKQ=\");\n_c = AutocompleteInput;\nexport default AutocompleteInput;\nvar _c;\n$RefreshReg$(_c, \"AutocompleteInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","commonIngredients","AutocompleteInput","value","onChange","placeholder","_s","suggestions","setSuggestions","showSuggestions","setShowSuggestions","inputRef","getSuggestions","input","inputItems","split","map","item","trim","currentInput","length","toLowerCase","filter","ingredient","startsWith","handleInputChange","e","newValue","target","handleSuggestionClick","suggestion","_inputRef$current","pop","join","current","focus","handleClickOutside","contains","document","addEventListener","removeEventListener","className","children","ref","type","onFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/hinnazeejah/Desktop/chef/frontend/src/components/AutocompleteInput.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\ninterface AutocompleteInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n}\n\nconst commonIngredients = [\n  'chicken', 'beef', 'pork', 'rice', 'pasta', 'tomatoes', 'onions', 'garlic',\n  'potatoes', 'carrots', 'broccoli', 'spinach', 'mushrooms', 'bell peppers',\n  'olive oil', 'eggs', 'milk', 'cheese', 'butter', 'bread', 'flour', 'sugar'\n];\n\nconst AutocompleteInput: React.FC<AutocompleteInputProps> = ({\n  value,\n  onChange,\n  placeholder\n}) => {\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const getSuggestions = (input: string) => {\n    const inputItems = input.split(',').map(item => item.trim());\n    const currentInput = inputItems[inputItems.length - 1].toLowerCase();\n    \n    return currentInput\n      ? commonIngredients.filter(ingredient =>\n          ingredient.toLowerCase().startsWith(currentInput)\n        )\n      : [];\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    onChange(newValue);\n    setSuggestions(getSuggestions(newValue));\n    setShowSuggestions(true);\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    const inputItems = value.split(',').map(item => item.trim());\n    inputItems.pop();\n    const newValue = [...inputItems, suggestion].join(', ');\n    onChange(newValue + ', ');\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (inputRef.current && !inputRef.current.contains(e.target as Node)) {\n        setShowSuggestions(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, []);\n\n  return (\n    <div className=\"relative\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={value}\n        onChange={handleInputChange}\n        onFocus={() => setShowSuggestions(true)}\n        className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n        placeholder={placeholder}\n      />\n      {showSuggestions && suggestions.length > 0 && (\n        <ul className=\"absolute z-10 w-full bg-white mt-1 rounded-md shadow-lg max-h-60 overflow-auto\">\n          {suggestions.map((suggestion) => (\n            <li\n              key={suggestion}\n              onClick={() => handleSuggestionClick(suggestion)}\n              className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\n            >\n              {suggestion}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AutocompleteInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}